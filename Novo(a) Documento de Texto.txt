-Fibonacci

//feito em sala com recursiva
defmodule Fibonacci do
  def fibonacci(0), do: 0
  def fibonacci(1), do: 1
  def fibonacci(n), do: fibonacci(n-1) + fibonacci(n-2)
end
IO.puts(Fibonacci.fibonacci(20))

// gpt
defmodule Fibonacci do
  def generate_sequence(n) when n <= 0, do: []
  def generate_sequence(1), do: [0]
  def generate_sequence(2), do: [0, 1]
  def generate_sequence(n) do
    generate_sequence(n, [1, 0])
  end

  defp generate_sequence(2, [second, first]), do: [first, second]
  defp generate_sequence(n, [second, first]) do
    next = first + second
    [next | generate_sequence(n - 1, [next, second])]
  end
end

Fibonacci.generate_sequence(10)
//
//eu
defmodule Math do
  @arr_fibo [0, 1]

  def arrFibo, do: @arr_fibo

  def executar(func, params), do: apply(func, params)

  def somar(a, b, c), do: a + b + c

  def multi(a, b), do: a * b

  def tam(arr), do: length(arr)

  def add(arr), do: [hd(arr) + hd(tl(arr))] ++ arr

  def fibo(n), do: do_fibo(n, arrFibo)

  defp do_fibo(0, _acc), do: []
  defp do_fibo(n, acc) when n > 0 do
    do_fibo(n - 1, add(acc))
  end
end
r1 = Math.executar(&Math.somar/3, [4, 5, 6])
r2 = Math.executar(&Math.multi/2, [3, 7])
r3 = Math.executar(fn(a, b, c) -> a + b + c end, [4, 5, 6])
r4 = Math.executar(fn(a, b) -> a * b end, [3, 7])
IO.puts "#{r1} #{r2}"
IO.puts "#{r3} #{r4}"
IO.puts "Fibonacci Sequence: #{Math.fibo(10)}"
/////////////////////////////////////////////////////////////////////////////////////

-Map

lista =[1,2,3,4,5,6]
nova_list =Enum.map (lisa,fn item -> item * 2 end )
IO.spect(nova_list)// pode ser puts
////////////////////////////////////////////////////////////////////

-Filter

lista =[1,2,3,4,5,6]
pares =Enum.filter (lisa,fn item -> rem (item,2) == 0 end)
IO.puts(pares)
/////////////////////////////////////////////////////////////////////////////////////////	

-Reduce

lista =[1,2,3,4,5,6]
soma =Enum.reduce (lista, 0,fn x, acc -> x acc end)
IO.puts(soma)
//////////////////////////////////////////////////////////////////////////////////

-Exercicio com map-reduce-filter

defmodule Exercicio do

  def calcular_media(notas_da_turma) do
    # filter serve para filtrar as notas que são 0 para nem incluir na soma 
    resgistros_validos = Enum.filter (notas_da_turma, fn{_nome, notas} -> length (notas) > 0 end)

    #extrai todas as notas dos alunos e manda em uma unica lista
    #acredito que possa utilizar o map normal
    todas_as_notas = Enum.flat_map (registros_validos, fn {_nomes, notas} -> notas end)

        # Usar Enum.reduce para calcular a média
     {soma, quantidade} = Enum.reduce(todas_as_notas, {0.0, 0}, fn nota, {acc_soma, acc_qtd} ->
      if nota > 0.0 do
        {acc_soma + nota, acc_qtd + 1}
      else
        {acc_soma, acc_qtd}
      end
     end)

        # Verificar se há notas válidas para evitar divisão por zero
    if quantidade > 0 do
      media = soma / quantidade
      IO.puts("A média da turma é #{media}")
    else
      IO.puts("Não há notas válidas para calcular a média da turma.")
    end
  end
end

 
  notas_da_turma =[
  {"alice",[9.5, 8.0,7.5]},
  {"Joao",[7.0, 8.0,7.5]},
  {"Pedro",[ 8.0,7.5]},
  ]
///////////////////////////////////////////////////////////////////////////////////////////////////

-double array

defmodule Teste do
  def double(n), do: n*2 
  def exec(arr), do: Enum.map(arr, fn i -> i*2 end)
end
/////////////////////////////////////////////////////////////////////////////////////////////////

-ordenação

defmodule ArrayUtils do
  #verifica se o array esta vazio e caso esteja retorna true
  defp is_list_sorted([]), do: true
  #verifica se o array tem um elemento, retorna true
  defp is_list_sorted([_]), do: true
  #caso tenha dois ou mais elementos no array when a<=b verifica se o elemento "a" é menor ou igual o elemento se a condição for verdadeira, significa que a lista até esse nome
  # então a função chama a si recursivamente com o restante do 
  defp is_list_sorted([a, b | tail]) when a <= b, do: is_list_sorted([b | tail])
  defp is_list_sorted(_), do: false

  def is_sorted?(list) do
    is_list_sorted(list)
  end
end

array_to_check = [1, 2, 3, 5, 5, 8, 10]   

if ArrayUtils.is_sorted?(array_to_check) do
  IO.puts "A lista está ordenada: true"
else
  IO.puts "A lista está ordenada: false"
end
/////////////////////////////////////////////////////////////////////////////////////////////////////

- verifica array sac

defmodule Teste do
  def exec(arr) do
    for n <- 0..(length(arr)-1) do
      when (Enum.at(arr, n) > Enum.at(arr, n+1), false)
    end
    true
  end
end
/////////////////////////////////////////////////////////////////////////////////////////////////

- função anonima

# Uma função anônima que dobra um número
double = fn x -> x * 2 end

# Usando a função anônima
result = double.(5) # Chama a função para dobrar o número 5
IO.puts(result)     # Deve imprimir 10

# Usando sintaxe de uma linha com %{}
double = fn x -> x * 2 end

# Sintaxe de uma linha com pipe operator
double = &(&1 * 2)

# Função anônima que aceita dois argumentos
add = fn a, b -> a + b end
//////////////////////////////////////////////////////////////////////////////////////////

-Funções recursivas:
Funções recursivas são funções que chamam a si mesmas. A recursão é uma técnica importante em Elixir para lidar com listas, árvores e outras estruturas de dados recursivas. Aqui está um exemplo de uma função recursiva simples que calcula o fatorial:


defmodule Factorial do
  def factorial(0), do: 1
  def factorial(n), do: n * factorial(n - 1)
end
///////////////////////////////////////////////////////////////////////////////////////

Erlang VM (BEAM): O Elixir é construído sobre a máquina virtual Erlang (BEAM), que é conhecida por ser extremamente eficaz na construção de sistemas altamente concorrentes e distribuídos. Isso torna o Elixir uma escolha sólida para aplicativos que precisam de alta disponibilidade e escalabilidade.

Programação Funcional: O Elixir é uma linguagem funcional, o que significa que é orientada para funções, enfatizando a imutabilidade e a programação declarativa. Isso torna o código Elixir mais previsível e mais fácil de depurar.

Concorrência Leve: A linguagem suporta processos leves (também conhecidos como atores) que facilitam a criação de sistemas altamente concorrentes sem a complexidade de programação de concorrência em muitas outras linguagens.

Supervisão e Tolerância a Falhas: O Elixir incentiva o uso de supervisão e tratamento de erros como parte fundamental da arquitetura do sistema, permitindo que os sistemas se recuperem de falhas sem interrupções significativas.

Escalabilidade: A arquitetura Erlang/BEAM e as características do Elixir facilitam a escalabilidade de aplicativos para atender a cargas de trabalho crescentes.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ELIXIR – PARADIGMAS DA PROGRAMAÇÃO
Imutabilidade na Programação Funcional:
A imutabilidade significa que uma vez que um dado é criado, ele não pode ser alterado. Em linguagens funcionais como Elixir, os dados são tratados como imutáveis. Em vez de modificar um dado existente, você cria um novo dado com base no original.
A importância da imutabilidade reside na prevenção de efeitos colaterais e na facilitação do rastreamento de bugs, pois dados imutáveis não são alterados por múltiplas partes do programa simultaneamente.
Função de Primeira Classe em Elixir:
Em Elixir, as funções são tratadas como valores de primeira classe, o que significa que podem ser atribuídas a variáveis, passadas como argumentos para outras funções e retornadas como valores de outras funções.
Funções Puras:
Funções puras são aquelas que, dadas as mesmas entradas, sempre produzem o mesmo resultado e não têm efeitos colaterais. Elas não dependem de variáveis externas e não alteram o estado do sistema. Isso facilita o entendimento e a depuração do código e torna mais fácil realizar testes automatizados.
Recursão em Programação Funcional:
A recursão é uma técnica em que uma função chama a si mesma para resolver um problema. Ela é amplamente utilizada em programação funcional porque não depende de estados mutáveis e se alinha bem com a abordagem imutável.
Diferença entre Funções Puras e Funções de Ordem Superior:
Funções Puras: São funções que não têm efeitos colaterais e sempre produzem o mesmo resultado para as mesmas entradas. Por exemplo, a função dobrar que dobra um número.
Funções de Ordem Superior: São funções que podem aceitar outras funções como argumentos e/ou retornar funções como resultados. Exemplo: Enum.map/2.  O fato de você conseguir passar funções como argumentos para outras funções é uma das características mais poderosas do Elixir. Porque isso permite que você crie funções que são extremamente flexíveis e reutilizáveis.
Vantagem de Evitar Efeitos Colaterais:
Evitar efeitos colaterais torna o código mais previsível e fácil de entender, pois não há surpresas causadas por mudanças em variáveis globais ou estado mutável.
Currying em Programação Funcional:
Currying é a técnica de transformar uma função de múltiplos argumentos em uma série de funções que aceitam apenas um argumento. Isso pode facilitar a composição de funções.
Composição de Funções:
Composição de funções é a prática de combinar duas ou mais funções para produzir uma nova função. Isso ajuda a criar código mais legível e reutilizável, pois permite dividir tarefas complexas em operações mais simples.
Imutabilidade de Dados vs. Mutabilidade em Linguagens Imperativas:
Em linguagens imperativas, os dados podem ser alterados após a criação. Na programação funcional, os dados são imutáveis, o que significa que uma vez criados, não podem ser alterados. Isso simplifica a lógica do programa e facilita a compreensão do estado do sistema.
Correspondência de Padrões (Pattern Matching):
É uma técnica em que você verifica se um valor corresponde a um padrão específico. Em Elixir, isso é uma característica fundamental e é amplamente usado para extrair informações de estruturas de dados complexas.
Benefícios da Avaliação Preguiçosa:
A avaliação preguiçosa (lazy evaluation) adia a avaliação de uma expressão até o momento em que seu resultado é realmente necessário. Isso pode economizar recursos em cálculos que não são utilizados.
Funções de Alta Ordem na Manipulação de Coleções:
Funções de alta ordem como map, reduce e filter facilitam a manipulação de coleções de dados, permitindo operações sofisticadas em listas e outras estruturas de dados.
Funções como Cidadãos de Primeira Classe:
Isso significa que as funções podem ser tratadas como qualquer outro tipo de dado. Elas podem ser passadas como argumentos para outras funções, retornadas como valores de outras funções e atribuídas a variáveis.
minha string #{nome}:

Esta linha é uma interpolação de string em  Quando você coloca #{expressao} dentro de uma string, o valor da expressão é calculado e inserido na string.

Exemplo:

nome = "João"
IO.puts "Olá, #{nome}!"
Isso irá imprimir: Olá, João!

list = [1, 2, 3, 4]:

Aqui, estamos criando uma lista chamada list com os elementos 1, 2, 3 e 4.

[0 | lista]:

Esta linha está usando a notação de cons (|) para adicionar o elemento 0 no início da lista lista. O resultado será uma nova lista com o elemento 0 no começo, seguido pelos elementos de lista.

Exemplo:

lista = [1, 2, 3, 4]
nova_lista = [0 | lista]
IO.inspect nova_lista
Isso irá imprimir: [0, 1, 2, 3, 4]

lista ++ [5]:

Esta linha está concatenando a lista lista com a lista [5], ou seja, adicionando o elemento 5 no final da lista lista.

Exemplo:

lista = [1, 2, 3, 4]
nova_lista = lista ++ [5]
IO.inspect nova_lista
Isso irá imprimir: [1, 2, 3, 4, 5]

hd(lista):

hd (head) retorna o primeiro elemento da lista. No caso, hd(lista) retornaria 1 para a lista [1, 2, 3, 4].

tl(lista):

tl (tail) retorna a lista sem o primeiro elemento. No caso, tl(lista) retornaria [2, 3, 4] para a lista [1, 2, 3, 4].

[head | tail] = lista:

Esta linha está fazendo uma correspondência de padrões (pattern matching). Ela vai desestruturar a lista lista, colocando o primeiro elemento em head e o restante da lista em tail.

Exemplo:

lista = [1, 2, 3, 4]
[head | tail] = lista
IO.puts "O primeiro elemento é #{head}"
IO.inspect "O restante da lista é #{tail}"
Isso irá imprimir:

O primeiro elemento é 1
"O restante da lista é [2, 3, 4]"

Entrada/Saída:
IO.puts/1: Imprime uma mensagem no console com uma nova linha no final.
IO.inspect/1: Exibe uma representação inspecionável de um valor no console.
Leitura de Entrada:
IO.gets/1: Lê uma linha da entrada padrão (console).
Formatação de Strings:
IO.format/2: Formata uma string de acordo com um especificador de formato.
Manipulação de Listas:
Enum.map/2: Aplica uma função a cada elemento de uma lista e retorna uma nova lista com os resultados.
Enum.filter/2: Retorna uma nova lista contendo apenas os elementos que satisfazem uma condição.
Enum.reduce/3: Combina todos os elementos de uma lista em um único valor usando uma função.
Manipulação de Tuples:
Tuple.insert_at/3: Insere um elemento em uma posição específica em uma tupla.
Tuple.delete_at/2: Remove o elemento em uma posição específica de uma tupla.
Manipulação de Maps:
Map.put/3: Adiciona ou substitui uma chave e valor em um mapa.
Map.get/2: Retorna o valor associado a uma chave em um mapa.
Manipulação de Strings:
String.length/1: Retorna o comprimento de uma string.
String.upcase/1: Converte uma string para maiúsculas.
String.downcase/1: Converte uma string para minúsculas.
String.split/2: Divide uma string com base em um delimitador.
Conversão de Tipos:
to_string/1: Converte um valor para uma representação de string.

defmodule Fibonacci do
  def calcular_fibonacci(0), do: 0
  def calcular_fibonacci(1), do: 1
  def calcular_fibonacci(n) do
    calcular_fibonacci(n - 1) + calcular_fibonacci(n - 2)
  end
end

 
Fibonacci.calcular_fibonacci(10)  # Calcula o décimo termo da sequência de Fibonacci

defmodule Math do 
  def executar(func, params), do: apply(func, params)
end

r1 = Math.executar(fn (a,b,c) -> a+b+c end, [4,5,6])
r2 = Math.executar(fn (a,b) -> a * b end, [5,5])

IO.puts "#{r1}, #{r2}"

##Map
# Definindo uma lista de números
numbers = [1, 2, 3, 4, 5]

# Usando Enum.map para dobrar cada elemento da lista
doubled_numbers = Enum.map(numbers, &(&1 * 2))

IO.inspect(doubled_numbers)

#Crie uma função chamada squared que aceite uma lista de números e retorne uma nova lista contendo os quadrados de cada número.
defmodule MyFunctions do
  def squared(numbers) do
    Enum.map(numbers, fn x -> x * x end)
  end
end
IO.inspect(MyFunctions.squared([1, 2, 3, 4, 5]))

defmodule MyFunctions do
  def even_or_odd(numbers) do
    Enum.map(numbers, fn n ->
      if rem(n, 2) == 0 do
        "par"
      else
        "ímpar"
      end
    end)
  end
end
IO.inspect(MyFunctions.even_or_odd([1, 2, 3, 4, 5]))

defmodule MyFunctions do
  def capitalize_names(names) do
    Enum.map(names, &String.capitalize/1)
  end
end
IO.puts(MyFunctions.capitalize_names(["pedro", "gabriel", "joana"]))
##FILTER
# Definindo uma lista de números
numbers = [1, 2, 3, 4, 5]

# Usando Enum.filter para manter apenas os números pares
even_numbers = Enum.filter(numbers, fn n -> rem(n, 2) == 0 end)

IO.inspect(even_numbers)

defmodule MyFunctions do
  def multiple_of_3(numbers) do
    Enum.filter(numbers, &rem(&1, 3) == 0)
  end
end

defmodule MyFunctions do
  def starts_with_a(words) do
    Enum.filter(words, &String.starts_with?(&1, "a"))
  end
end

#Reduce
# Definindo uma lista de números
numbers = [1, 2, 3, 4, 5]

# Usando Enum.reduce para somar todos os números
sum = Enum.reduce(numbers, 0, &(&1 + &2))

IO.inspect(sum)

defmodule MyFunctions do
  def multiply_all(numbers) do
    Enum.reduce(numbers, 1, &(&1 * &2))
  end
end

defmodule MyFunctions do
  def concatenate_strings(strings) do
    Enum.reduce(strings, "", &String.concat(&1, &2))
  end
end

defmodule MyFunctions do
  def max_number(numbers) do
    Enum.reduce(numbers, fn x, acc -> if x > acc, do: x, else: acc end)
  end
end

